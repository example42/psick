# GitLab CI configuration - https://docs.gitlab.com/ce/ci/yaml/README.html
# Example for a Puppet deployment workflow with integration and production
# branches. Requires a fully configured Puppet-GitLab-CI runners
# environment to work.

stages:
  - checks
  - deploy_check
  - unit
  - diff
  - documentation
  - integration
  - canary_runs
  - promote
  - rollout

# Version Deploy check for every branch with environment creation
# It will try by default 6 times with 10 second between each try
# so that Puppet has time to get the new version of the repository
verify_code_deploy:
  stage: deploy_check
  script: "bin/codemanager_check_deploy.sh ${CI_BUILD_REF_NAME}"
  tags:
    - deploy_puppet
  when: on_success
  allow_failure: true
  environment:
    name: ${CI_BUILD_REF_NAME}
    url: https://puppet.lab.psick.io/

# Run Syntax Checks on Feature/Personal Branch
# and Development branch:
# All branches excluded production and testing
syntax:
  stage: checks
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script: "bin/puppet_check_syntax_fast.sh all_but_chars"
  cache:
    untracked: true
    paths:
    - modules/
  tags:
    - test_puppet
  except:
    - production
  only:
    - branches

lint:
  stage: checks
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script: "bin/puppet_lint.sh"
  cache:
    untracked: true
    paths:
    - modules/
  tags:
    - test_puppet
  except:
    - production
  only:
    - branches
  allow_failure: true

chars:
  stage: checks
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script: "bin/puppet_check_syntax_fast.sh chars"
  cache:
    untracked: true
    paths:
    - modules/
  tags:
    - test_puppet
  except:
    - production
  only:
    - branches
  allow_failure: true

rake_controlrepo:
  stage: unit
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script:
    - "bin/puppet_check_rake.sh site bundle"
    - "bin/puppet_check_rake.sh controlrepo"
  cache:
    untracked: true
    paths:
    - modules/
    - vagrant/environments/ci/.vagrant/
  tags:
    - test_puppet
  except:
    - production
  only:
    - branches
  allow_failure: true

catalog_preview:
  stage: diff
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script: "bin/gitlab_catalog_preview.sh integration"
  cache:
    untracked: true
    paths:
    - modules/
  tags:
    - deploy_puppet
  only:
    - integration
  allow_failure: true

# Can be duplicated to use different images (using different --image)
# or with custom facts --facts. Check docker_run.sh for all the options.
docker_test:
  stage: integration
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
  script: "bin/docker_run.sh --image centos-7"
  cache:
    untracked: true
    paths:
    - modules/
  allow_failure: true
  tags:
    - test_puppet
  only:
    - schedules

beaker:
  stage: integration
  before_script:
    - "bin/gitlab_before.sh ${CI_BUILD_REF_NAME}"
    - "/opt/puppetlabs/puppet/bin/bundle install --with=integration --path=vendor"
  script: "/opt/puppetlabs/puppet/bin/rake beaker_roles:psick"
  cache:
    untracked: true
    paths:
    - modules/
  allow_failure: true
  tags:
    - test_puppet
  only:
    - integration

run_puppet_on_integration:
  stage: canary_runs
  before_script:
    # Trigger remote Puppet runs via puppet job
    - "bin/puppet_job_run.sh integration"
    # Trigger remote Puppet runs via Rundeck
#    - "bin/rundeck_job_run.sh testing"
  script:
    - "bin/puppetdb_env_query.sh integration"
  tags:
    - deploy_puppet
  when: on_success
  only:
    - integration
  allow_failure: true

merge_request_feature:
  stage: promote
  script:
    - "bin/gitlab_create_merge_request.rb ${CI_BUILD_REF_NAME} integration"
  when: on_success
  tags:
    - deploy_puppet
  except:
    - production
    - integration
  only:
    - branches

merge_accept_feature:
  stage: promote
  script: "bin/gitlab_accept_merge_request.rb ${CI_BUILD_REF_NAME} integration"
  tags:
    - deploy_puppet
  when: manual
  except:
    - production
    - integration
  only:
    - branches


# Allow Merge Request to fail as it can happen that there's
# already a merge request from testing to production ready to
# be merged
merge_request_production:
  stage: promote
  script:
    - "bin/gitlab_create_merge_request.rb integration production"
  when: on_success
  tags:
    - deploy_puppet
  only:
    - integration
  allow_failure: true

merge_accept_production:
  stage: promote
  script: "bin/gitlab_accept_merge_request.rb integration production"
  tags:
    - deploy_puppet
  when: manual
  only:
    - integration
  environment:
    name: production

# Production
canary_run_on_production:
  stage: canary_runs
  before_script:
    - "bin/puppet_job_run.sh production"
  script: "bin/puppetdb_env_query.sh production"
  tags:
    - deploy_puppet
  when: on_success
  only:
    - production
  allow_failure: true # TOREMOVE when fixed

run_puppet_on_production:
  stage: rollout
  before_script:
    - "bin/puppet_job_run.sh production"
  script: "bin/puppetdb_env_query.sh production"
  tags:
    - deploy_puppet
  when: on_success
  only:
    - production
  allow_failure: true # TOREMOVE when fixed


pages:
  stage: documentation
  before_script:
    - rm -rf doc public .yardoc README.md
    - bin/docs_classlistgenerate.sh site/profile docs/classes.md
    - for f in $(cat docs/toc.txt); do cat docs/$f >> README.md ; echo >> README.md ; done
    - bin/gitlab_before.sh
  script:
    - puppet strings generate site/**/**/*{.pp\,.rb} site/**/**/**/*{.pp\,.rb} modules/psick/**/*{.pp\,.rb} modules/psick/**/**/*{.pp\,.rb} modules/psick/**/**/**/*{.pp\,.rb} manifests/site.pp
    - mv doc public
  tags:
    - deploy_puppet
  artifacts:
    paths:
    - public
    expire_in: '30 day'
  only:
    - production

pages_modules:
  stage: documentation
  before_script:
    - bin/gitlab_before.sh
    - rm -f README.md
    - bin/docs_classlistgenerate.sh modules docs/classes_modules.md
    - for f in $(cat docs/toc-modules.txt); do cat docs/$f >> README.md ; done
    - bin/gitlab_before.sh
  script:
    - puppet strings generate modules/**/**/*{.pp\,.rb} modules/**/**/**/*{.pp\,.rb}
    # - rake strings:generate["modules/**/**/*{.pp\,.rb} modules/**/**/**/*{.pp\,.rb}, false, false, markdown,-r docs/PsickGuide.md"]
    - mv doc public/modules
  tags:
    - deploy_puppet
  artifacts:
    paths:
    - public
    expire_in: '30 day'
  when: manual
  only:
    - production

generate_pdf:
  stage: documentation
  before_script:
    - bin/docs_classlistgenerate.sh docs/classes.md
    - mkdir public
    - for f in $(cat docs/toc.txt); do cat docs/$f >> public/PsickGuide.md ; done
  script:
    - docker run -v $(pwd):/puppet -i jagregory/pandoc -f markdown /puppet/public/PsickGuide.md -o /puppet/public/PsickGuide.pdf --latex-engine=xelatex -s  --toc -V geometry:margin=2cm
  tags:
    - test_puppet
  artifacts:
    paths:
    - public
    expire_in: '30 day'
  only:
    - production
